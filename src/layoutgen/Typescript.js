import * as Common from './Common'

function genMember(widget, namespace) {
  const type = widget.constructor.name
  const id = Common.getPropertyValue(widget, 'id')
  return `readonly ${id}: ${namespace}.${type}`
}

function genBuilder(widget, isUsingTabs) {
  const type = widget.constructor.name
  const proto = Object.getPrototypeOf(widget)
  const nameLower =
          type.substring(0, 1).toLowerCase() + type.substring(1)

  const id = Common.getPropertyValue(widget, 'id')
  let res = `${id}: builder.${nameLower}(`

  const coordNames = ['x', 'y', 'w', 'h']
  res += coordNames.map((n) => Common.getPropertyValue(widget, n)).join(', ')
  res += `, ${widget.uuid}`
  if (isUsingTabs) {
    res += `, ${widget.tab}`
  }
  res += `)`
  for (const [name, prop] of Object.entries(proto.PROPERTIES)) {
    if (prop.ignoreInBuilder) continue

    if (Common.isDefaultPropValue(widget, name, prop)) continue

    const val = Common.getPropertyValue(widget, name, prop)
    res += "\n" + Common.formatProperty(name, val, '                    ')
    res = res.substring(0, res.length-1)
  }
  return res
}

export function parse(text) {
  const exps = [/^\/\/ Layout: (.+)$/m, /^\s*({\s*"[\s\S]+)/]
  for (const exp of exps) {
    const match = text.match(exp)
    if (match === null) {
      continue
    }

    try {
      return JSON.parse(match[1])
    } catch (e) {}
  }
  return null
}

export function generate(widgets, layout) {
  const isUsingTabs = widgets.some((w) => Common.getPropertyValue(w, 'tab') > 0)

  const builder = widgets
    .map((w) => genBuilder(w, isUsingTabs))
    .join(',\n                ')
  const builderMembers = widgets.map((w) => genMember(w, 'gridui.builder')).join('\n    ')
  const layoutMembers = widgets.map((w) => genMember(w, 'gridui.widget')).join('\n    ')

  const baseMinVer = isUsingTabs ? 0x040900 : 0x000000
  const minVersion = widgets
    .reduce((minVer, w) => {
      if (w.MIN_LIBRARY_VERSION > minVer) {
        return w.MIN_LIBRARY_VERSION
      }
      return minVer
    }, baseMinVer)
    .toString(16)
    .padStart(6, '0')
  return `// AUTOGENERATED FILE, DO NOT EDIT
// Generated by ${window.location.href}
// Layout: ${JSON.stringify(layout)}

// Add this as a file layout.ts to your project.
//
// Inicialization:
//
//   import Layout from "./layout.js"
//
//   Layout.begin("Owner name", "Device Name", builder => {
//
//     // Add calback handlers here, like this:
//     builder.Button1.onPress(btn => {
//         console.log("press")
//     })
//
//   })
//
// Usage later in code:
//
//   Layout.Button1.color = "red";
//   console.log(Layout.Button1.pressed)
//

import * as gridui from "gridui"

if(gridui.version() < 0x${minVersion}) {
    throw new Error("Your RBGridUi library version is too low for this layout, please update to ${minVersion}.")
}

interface LayoutBuilder {
    ${builderMembers}
}

interface Layout {
    ${layoutMembers}

    begin(ownerName: string, deviceName: string, builderCallback?: (layoutBuilder: LayoutBuilder) => void): void
}

const layout = {
    begin(ownerName: string, deviceName: string, builderCallback?: (layoutBuilder: LayoutBuilder) => void) {
        gridui.begin(ownerName, deviceName, (builder) => {
            const layoutBuilder: LayoutBuilder = {
                ${builder}
            }

            if(builderCallback !== undefined) {
                builderCallback(layoutBuilder)
            }

            for(const key in layoutBuilder) {
                layout[key] = layoutBuilder[key].finish()
            }
        })
    }
} as Layout

export default layout
`
}
