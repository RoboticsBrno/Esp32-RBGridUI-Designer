import * as Common from './Common'

function genMember(widget, typeSuffix) {
  const type = widget.constructor.name
  const id = Common.getPropertyValue(widget, 'id')
  return `${type}${typeSuffix} ${id};`
}

function genCommit(widget) {
  const id = Common.getPropertyValue(widget, 'id')
  return `Layout.${id} = ${id}.finish();`
}

function genBuilder(widget) {
  const type = widget.constructor.name
  const proto = Object.getPrototypeOf(widget)

  const id = Common.getPropertyValue(widget, 'id')
  let res = `${id}(
            UI.${type.toLowerCase()}(`

  const coordNames = ['x', 'y', 'w', 'h']
  res += coordNames.map((n) => Common.getPropertyValue(widget, n)).join(', ')
  res += `, ${widget.uuid})\n`

  for (const [name, prop] of Object.entries(proto.PROPERTIES)) {
    if (prop.ignoreInBuilder) continue

    if (Common.isDefaultPropValue(widget, name, prop)) continue

    if (type === 'Arm' && name === 'info') {
      res += `                .info(rkArmGetInfo())\n`
      continue
    }

    const val = Common.getPropertyValue(widget, name, prop)
    res += Common.formatProperty(name, val, '                ')
  }

  res += `        )`
  return res
}

export function parse(text) {
  const exps = [/^\/\/ Layout: (.+)$/m, /^\s*({\s*"[\s\S]+)/]
  for (const exp of exps) {
    const match = text.match(exp)
    if (match === null) {
      continue
    }

    try {
      return JSON.parse(match[1])
    } catch (e) {}
  }
  return null
}

export function generate(widgets, layout) {
  const builder = widgets.map((w) => genBuilder(w)).join(',\n        ')
  const builderMembers = widgets.map((w) => genMember(w, '&')).join('\n    ')
  const layoutMembers = widgets.map((w) => genMember(w, '')).join('\n    ')
  const builderCommit = widgets.map((w) => genCommit(w)).join('\n    ')
  const minVersion = widgets
    .reduce((minVer, w) => {
      if (w.MIN_LIBRARY_VERSION > minVer) {
        return w.MIN_LIBRARY_VERSION
      }
      return minVer
    }, 0x000000)
    .toString(16)
    .padStart(6, '0')
  return `// clang-format off

// AUTOGENERATED FILE, DO NOT EDIT
// Generated by ${window.location.href}
// Layout: ${JSON.stringify(layout)}

// Usage: include this file, where needed, and in *one* .cpp file,
// define also GRIDUI_LAYOUT_DEFINITION just before the layout like this:
//
//    #define GRIDUI_LAYOUT_DEFINITION
//    #include "layout.h"
//    using namespace gridui;
//
// The layout.h should also be the last included header. Then, in your code:
//
//    auto builder = Layout.begin();
//    builder.Button1.onPress([](Button&) { ... })
//    ...
//    builder.commit();

#pragma once

#include <esp_log.h>
#include "gridui.h"

namespace gridui {

#ifndef RB_GRIDUI_VERSION
#define RB_GRIDUI_VERSION 0x040000
#endif

static_assert(RB_GRIDUI_VERSION >= 0x${minVersion},
    "Your RBGridUi library version is too low for this layout, please update to ${minVersion}.");

class _Layout;

namespace builder {
class _LayoutBuilder {
    friend class gridui::_Layout;

    _LayoutBuilder() :
        ${builder}
    {
    }

public:
    void commit();

    ${builderMembers}
};

}; // namespace builder

class _Layout {
    friend class builder::_LayoutBuilder;
public:
    _Layout() {}

    builder::_LayoutBuilder begin() {
        static bool called = false;
        if(called) {
            ESP_LOGE("GridUILayout", "Layout.begin() was called more than once, this is an error!");
        }
        called = true;
        return builder::_LayoutBuilder();
    }

    ${layoutMembers}
};

extern _Layout Layout;
#ifdef GRIDUI_LAYOUT_DEFINITION
_Layout Layout;
#endif

namespace builder {

void _LayoutBuilder::commit() {
    ${builderCommit}
    UI.commit();
}

};

};
`
}
